#!/usr/bin/env python3
# This file is placed in the Public Domain.
# pylint: disable=C,W0603,W0718


"tinder"


import os
import shutil
import sys
import termios
import time
import _thread


sys.path.insert(0, os.getcwd())


from sbn.clients import Buffered, Config
from sbn.command import Commands, command, parse
from sbn.excepts import errors, later
from sbn.objects import Object, keys
from sbn.package import Table
from sbn.reactor import Event
from sbn.threads import STARTTIME, launch
from sbn.utility import elapsed
from sbn.workdir import Workdir, skel


import sbn.modules as MODS


Workdir.wdr  = ".test"


cfg = Config()
cfg.index = 0


lap = 1
nrs = 1
nrcommand = 1
percall   = 1


events = []
paylock = _thread.allocate_lock()


param = Object()
param.log = ["bla", ""]
param.cfg = ["cfg nick=mekker", ""]
param.cmd = [""]
param.dne = ["mekker", ""]
param.dpl = ["hnrss title,url", ""]
param.exp = ['']
param.fnd = ["log", ""]
param.imp = ["tests/feeds.opml", ""]
param.mod = [""]
param.mre = [""]
param.nme = ["hnrss hackernews", ""]
param.pwd = ["bla mekker", ""]
param.rem = ["hnrss", ""]
param.res = ["hnrss"]
param.rss = ["http://hnrss.org/newest", ""]
param.srv = [""]
param.tdo = ["mekker", ""]
param.thr = [""]
param.ver = [""]


class CLI(Buffered):

    def __init__(self):
        Buffered.__init__(self)
        self.register("command", command)

    def raw(self, txt):
        if "v" in cfg.opts:
            print(txt)


def banner():
    tme = time.ctime(time.time()).replace("  ", " ")
    print(f"{Config.name.upper()} since {tme}")
    print(",".join(sorted(keys(Commands.cmds))))


def consume(evts):
    done = []
    for event in evts:
        event.wait()
        done.append(event)
    for todo in done:
        events.remove(todo)
    return done


def payload(clt):
    nmr = 0
    for cmdd in sorted(Commands.names.keys()):
        for ex in getattr(param, cmdd, [""]):
            event = Event()
            event.txt = cmdd + " " + ex
            event.type = "command"
            events.append(event)
            clt.put(event)
            nmr += 1
    return nmr


def wrap(function):
    old3 = None
    try:
        old3 = termios.tcgetattr(sys.stdin.fileno())
    except termios.error:
        pass
    try:
        function()
    except (KeyboardInterrupt, EOFError):
        pass
    except Exception as ex:
        later(ex)
    finally:
        if old3:
            termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, old3)


def main():
    global nrs
    global nrcommand
    parse(cfg, " ".join(sys.argv[1:]))
    for mod in Table.all(MODS):
        Commands.scan(mod)
        mod.DEBUG = True
    nrcommand = len(Commands.cmds) or 1
    if "v" in cfg.opts:
        banner()
        print("verbose is on")
    if "f" not in cfg.opts:
        if os.path.exists(Workdir.wdr):
            shutil.rmtree(Workdir.wdr)
    skel()
    clt = CLI()
    clt.start()
    nrs = cfg.index or 1
    thrs = []
    for _nr in range(nrs):
        thrs.append(launch(payload, clt))
    for thr in thrs:
        thr.join()
    consume(events)
    clt.stop()
    if "w" in cfg.opts:
        clt.wait()


if __name__ == "__main__":
    wrap(main)
    endtime = time.time()
    lap = elapsed(endtime-STARTTIME)
    percall = (endtime-STARTTIME)/(nrs*nrcommand)
    if "v" in cfg.opts:
        if not list(errors()):
            print("no errors")
        for line in errors():
            print(line)
        if events:
            for evt in events:
                print(evt)
            print(f"{len(events)} events")
        print(f"{lap} {nrs} {nrcommand} {percall}")
    sys.stdout.flush()
    sys.exit(0)
